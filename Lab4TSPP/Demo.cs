public class Demo
{
    public static void RunObserverDemo()
    {
        Order order1 = new Order("100");
        Order order2 = new Order("101");

        
        User user1 = new User("–û–ª–µ–∫—Å—ñ–π");
        User user2 = new User("–Ü—Ä–∏–Ω–∞");

        order1.Attach(user1);
        order2.Attach(user2);

        Console.WriteLine("üîî –ù–æ–≤–∞ –ø–æ–¥—ñ—è: –°—Ç–≤–æ—Ä–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è");
        order1.SetStatus("–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è ‚úÖ");
        order2.SetStatus("–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è ‚úÖ");

        Console.WriteLine("\nüîî –û–Ω–æ–≤–ª–µ–Ω–Ω—è: –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –ø—Ä–æ–¥–∞–≤—Ü–µ–º");
        order1.SetStatus("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ üì¶");
        order2.SetStatus("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ üì¶");


        Console.WriteLine("\nüîî –û–Ω–æ–≤–ª–µ–Ω–Ω—è: –¢–æ–≤–∞—Ä –≤ –¥–æ—Ä–æ–∑—ñ");
        order1.SetStatus("–î–æ—Å—Ç–∞–≤–ª—è—î—Ç—å—Å—è üöö");
        order2.SetStatus("–î–æ—Å—Ç–∞–≤–ª—è—î—Ç—å—Å—è üöö");

        Console.WriteLine("\nüîï –ú–∞–∫—Å–∏–º –≤—ñ–¥–ø–∏—Å–∞–≤—Å—è –≤—ñ–¥ –æ–Ω–æ–≤–ª–µ–Ω—å");
        order2.Detach(user2);

        Console.WriteLine("\nüîî –û–Ω–æ–≤–ª–µ–Ω–Ω—è: –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ");
        order1.SetStatus("–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ üè†");
        order2.SetStatus("–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ üè†");
        
        Console.WriteLine("\nüîî –û–Ω–æ–≤–ª–µ–Ω–Ω—è: –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ");
        order1.SetStatus("–ó–∞–≤–µ—Ä—à–µ–Ω–æ ‚úÖ");
        order2.SetStatus("–ó–∞–≤–µ—Ä—à–µ–Ω–æ ‚úÖ");
    }

    public static void RunSingletonDemo()
    {
        ResourceManager rm = ResourceManager.Instance;

        rm.AddImage("logo", "/images/logo.png");
        rm.AddFont("main", "Roboto");
        rm.AddData("version", "1.0.0");

        Console.WriteLine("Image: " + rm.GetImage("logo"));
        Console.WriteLine("Font: " + rm.GetFont("main"));
        Console.WriteLine("App Version: " + rm.GetData("version"));
    }
    
    public static void RunAdapterDemo()
    {
        NationalBankApi nbuApi = new NationalBankApi();
        EuropeanCentralBankApi ecbApi = new EuropeanCentralBankApi();

        ICurrencyProvider adapter = new CurrencyAdapter(nbuApi, ecbApi);

        Console.WriteLine("–ö—É—Ä—Å UAH ‚Üí USD: " + adapter.GetExchangeRate("UAH", "USD"));
        Console.WriteLine("–ö—É—Ä—Å UAH ‚Üí EUR: " + adapter.GetExchangeRate("UAH", "EUR"));
        Console.WriteLine("–ö—É—Ä—Å EUR ‚Üí USD: " + adapter.GetExchangeRate("EUR", "USD"));
        Console.WriteLine("–ö—É—Ä—Å USD ‚Üí EUR: " + adapter.GetExchangeRate("USD", "EUR"));
    }
    
    public static void RunFactoryDemo()
    {
        UserFactory adminFactory = new AdminFactory();
        UserFactory managerFactory = new ManagerFactory();
        UserFactory employeeFactory = new EmployeeFactory();

        IUser admin = adminFactory.CreateUser();
        IUser manager = managerFactory.CreateUser();
        IUser employee = employeeFactory.CreateUser();

        admin.DisplayInfo();
        manager.DisplayInfo();
        employee.DisplayInfo();
    }
}
